name: check

on:
  schedule:
    # Runs at 02:30, only on Friday.
    # https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule
    - cron: "30 2 * * 5"
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:

jobs:
  check:
    strategy:
      matrix:
        os:
          - name: ubuntu-latest
            triple: x86_64-linux-gnu
          - name: macos-latest
            triple: arm64-apple-darwin
          - name: macos-13
            triple: x86_64-apple-darwin
          - name: windows-latest
            triple: x86_64-w64-mingw32

          # stable check

          # pre-release check

          # bleeding check
          # 1. install latest toolchain
          # 2. install latest core library from github.com
        version: [stable,pre-release,bleeding]
      fail-fast: false
    runs-on: ${{ matrix.os.name }}
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4

      # - name: gcc version
      #   run: |
      #     echo "" | gcc -xc - -v -E 
      # - name: clang version
      #   run: |
      #     echo "" | clang -xc - -v -E
      
      - name: set moonbit install version to stable
        if: ${{ matrix.version == 'pre-release' }}
        run: |
          echo "MOONBIT_INSTALL_VERSION=pre-release" >> $GITHUB_ENV
        shell: bash

      - name: set moonbit install version to stable
        if: ${{ matrix.version == 'bleeding' }}
        run: |
          echo "MOONBIT_INSTALL_VERSION=bleeding" >> $GITHUB_ENV
        shell: bash

      - name: set my_home
        run: |
          echo $HOME >> my_home.txt      

      - name: Set Github Action Global Variable
        id: global
        run: |
          echo "year_week=$(/bin/date -u "+%Y-%V")" >> $GITHUB_OUTPUT
          echo "year_month_day=$(/bin/date -u "+%Y-%m-%d")" >> $GITHUB_OUTPUT
          echo "home=$(cat my_home.txt)" >> $GITHUB_OUTPUT
        shell: bash 

      # every week
      - name: cache moonbit toolchain every week
        if: ${{ matrix.version == 'stable' ||  matrix.version == 'pre-release'  }}
        id: cache-moonbit-toolchain-every-week
        uses: actions/cache@v4
        with: 
          path: "${{ steps.global.outputs.home }}/.moon"
          key: "${{ matrix.os.name }}-${{ matrix.version }}-${{ steps.global.outputs.year_week }}"

      # every day
      - name: cache moonbit toolchain every day 
        if: ${{ matrix.version == 'bleeding' }}
        id: cache-moonbit-toolchain-every-day
        uses: actions/cache@v4
        with: 
          path: "${{ steps.global.outputs.home }}/.moon"
          key: "${{ matrix.os.name }}-${{ matrix.version }}-${{ steps.global.outputs.year_month_day }}"

      - name: install on unix
        if: ${{ matrix.os.name != 'windows-latest' && steps.cache-moonbit-toolchain-every-week.outputs.cache-hit != 'true' }}
        run: |
          curl -fsSL https://cli.moonbitlang.com/install/unix.sh | bash -s $MOONBIT_INSTALL_VERSION

      - name: install on windows
        if: ${{ matrix.os.name == 'windows-latest' && steps.cache-moonbit-toolchain-every-week.outputs.cache-hit != 'true' }}
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm https://cli.moonbitlang.com/install/powershell.ps1 | iex

      - name: add env path on unix
        if: ${{ matrix.os.name != 'windows-latest' }}
        run: |
          echo "$HOME/.moon/bin" >> $GITHUB_PATH

      - name: add env path on windows
        if: ${{ matrix.os.name == 'windows-latest' }}
        run: |
          "C:\Users\runneradmin\.moon\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: moon version
        run: |
          moon version --all

      - name: install module dependencies
        run: |
          moon update
          moon install

      - name: moon check
        run: moon check --deny-warn

      - name: moon info
        run: |
          moon info --target wasm,wasm-gc,js,native
          git diff --exit-code

      - name: format diff
        run: |
          moon fmt
          git diff --exit-code

      - name: Setup MSVC
        if: ${{ matrix.os.name == 'windows-latest' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set ulimit on unix
        if: ${{ matrix.os.name != 'windows-latest' }}
        run: |
          ulimit -s 8176

      - name: moon test
        run: |
          moon test --target all,native
          moon test --target all,native --release

      - name: moon test with dedup_wasm
        if: ${{ matrix.os.name != 'windows-latest' }}
        env:
          MOONC_INTERNAL_PARAMS: dedup_wasm = 1 |

        run: |
          moon clean
          ulimit -s 8176
          moon test --target wasm,wasm-gc
          moon test --target wasm,wasm-gc --release

      - name: moon test --doc
        run: |
          moon test --doc

  moon-json-format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: check `moon.*.json` format
        shell: bash
        run: |
          _passed=0;
          for f in $(find . -type f -name "moon.*.json"); do
            if ! jq '.' $f > /dev/null; then
              echo $f;
              _passed=1;
            fi
          done
          (exit $_passed)

  prettier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: |
          npm install --global prettier;
          find . -name *.mod.json -exec npx prettier --write {} \;
          find . -name *.pkg.json -exec npx prettier --write {} \;
          git diff --exit-code;

  check-typos:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: AutoCorrect
        uses: huacnlee/autocorrect-action@v2

      - name: typos-action
        uses: crate-ci/typos@v1.31.1
